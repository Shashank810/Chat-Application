#include<iostream>
#include<WinSock2.h>
#include<ws2tcpip.h>
#include<thread>
#include<string>
using namespace std;
#pragma comment(lib,"ws2_32.lib")



bool initialize() {
	WSADATA data;
	return WSAStartup(MAKEWORD(2, 2), &data) == 0;
}

void sndMessage(SOCKET s) {

	cout << "Enter your chat Name" << endl;
	string name,message;
	getline(cin, name);
	while (1) {
		getline(cin, message);
		string msg = name + " : " + message;
		int bytesend = send(s, msg.c_str(), msg.length(), 0);
		if (bytesend == SOCKET_ERROR) {
			cout << "Error sending message" << endl;
			break;
		}

		if (message == "quit" || message == "Quit" || message == "QUIT")
		{
			cout << "Stopping chat";
			break;
		}

	}
	closesocket(s);
	WSACleanup();
}
void recvMessage(SOCKET s) {
	char buffer[4096];
	int recvlenght;
	while (1) {
		recvlenght = recv(s, buffer, sizeof(buffer), 0);
		if (recvlenght <= 0) {
			cout << "Disconnected from Server" << endl;
			break;
		}
	}
	closesocket(s);
	WSACleanup();
}

int main() {

	if (!initialize()) {
		cout << "Initialize winsock failed" << endl;
		return 1;

	}
	SOCKET s;
	s = socket(AF_INET, SOCK_STREAM, 0);


	if (s == INVALID_SOCKET){
		cout << "Invalid Socket created" << endl;
		return 1;
		}
	int port = 12345;
	string serveraddress = "127.0.0.1";
	sockaddr_in serveraddr;
	serveraddr.sin_family = AF_INET;
	serveraddr.sin_port = htons(port);
	inet_pton(AF_INET, serveraddress.c_str(), &(serveraddr.sin_addr));
	
	if (connect(s, reinterpret_cast<sockaddr*>(&serveraddr), sizeof(serveraddr)) == SOCKET_ERROR)
	{
		cout << "Not able tp connect to server" << endl;
		closesocket(s);
		WSACleanup();
		return 1;
	}
	cout << "Connected to Server" << endl;

	thread senderthread(sndMessage, s);
	thread recvthread(recvMessage, s);

	senderthread.join();
	recvthread.join();
	return 0;
}
